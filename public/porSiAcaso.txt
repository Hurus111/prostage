<div class="col-md-3">
            <div class="card bg-default">
                <img class="card-img-top" src="{{asset('/hugo.jpg')}}" alt="Img card">
 				<h5 class="card-header">
					Hugo Rivas
				</h5>
				<div class="card-body">
					<p class="card-text">
						A la recherche d’un stage en entreprise pour ma deuxième année en DUT Informatique (Semestre 4).
					</p>
                    <p class="card-text">
                        Passionné par l’informatique, et motivé à travailler en groupe, j’aime prendre des initiatives au sein des projets ainsi que m’adapter aux différents problèmes que l’on peut rencontrer dans ceux-ci.
                    </p>
                    <p class="card-text">
						+33 07 05 62 48 13
					</p>
                    <p class="card-text">		
                        <a href="mailto:hrgeslin@iutbayonne.univ-pau.fr" target="_blank" class="btn btn-primary">Email Professionnel</a>
                        <a href="mailto:hugorivasgeslin@gmail.com" target="_blank" class="btn btn-primary">Email Personnel</a>
					</p>
				</div>
			</div>
		</div>



	/**
     * @ORM\ManyToMany(targetEntity=Stage::class, mappedBy="entreprise")
     */
    private $stageEntrepriseLink;

    public function __construct()
    {
        $this->stageEntrepriseLink = new ArrayCollection();
    }

	/**
     * @ORM\ManyToMany(targetEntity=Stage::class, mappedBy="formation")
     */
    private $stageFormationLink;

    public function __construct()
    {
        $this->stageFormationLink = new ArrayCollection();
    }

	
    /**
     * @return Collection|Stage[]
     */
    public function getStage(): Collection
    {
        return $this->stageFormationLink;
    }

    public function addStage(Stage $stage): self
    {
        if (!$this->stageFormationLink->contains($stage)) {
            $this->stageFormationLink[] = $stage;
            $stage->addFormation($this);
        }

        return $this;
    }

    public function removeStage(Stage $stage): self
    {
        if ($this->stageFormationLink->removeElement($stage)) {
            $stage->removeFormation($this);
        }

        return $this;
    }

	/**
     * @return Collection|Stage[]
     */
    public function getStage(): Collection
    {
        return $this->stageEntrepriseLink;
    }

    public function addStage(Stage $stage): self
    {
        if (!$this->stageEntrepriseLink->contains($stage)) {
            $this->stageEntrepriseLink[] = $stage;
            $stage->addEntreprise($this);
        }

        return $this;
    }

    public function removeStage(Stage $stage): self
    {
        if ($this->stageEntrepriseLink->removeElement($stage)) {
            $stage->removeEntreprise($this);
        }

        return $this;
    }








	//////////////////
	/**
     * @return Collection|Formation[]
     */
    public function getFormation(): Collection
    {
        return $this->formation;
    }

    public function addFormation(Formation $formation): self
    {
        if (!$this->formation->contains($formation)) {
            $this->formation[] = $formation;
        }

        return $this;
    }

    public function removeFormation(Formation $formation): self
    {
        $this->formation->removeElement($formation);

        return $this;
    }

    /**
     * @return Collection|Entreprise[]
     */
    public function getEntreprise(): Collection
    {
        return $this->entreprise;
    }

    public function addEntreprise(Entreprise $entreprise): self
    {
        if (!$this->entreprise->contains($entreprise)) {
            $this->entreprise[] = $entreprise;
        }

        return $this;
    }

    public function removeEntreprise(Entreprise $entreprise): self
    {
        $this->entreprise->removeElement($entreprise);

        return $this;
    }
	////////////////
	public function __construct()
    {
        $this->formation = new ArrayCollection();
        $this->entreprise = new ArrayCollection();
    }